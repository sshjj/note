给你一个字符串 s，它仅由字母 'a' 和 'b' 组成。每一次删除操作都可以从 s 中删除一个回文 子序列。

返回删除给定字符串中所有字符（字符串为空）的最小删除次数。

「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。

「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。

 

示例 1：

输入：s = "ababa"
输出：1
解释：字符串本身就是回文序列，只需要删除一次。
示例 2：

输入：s = "abb"
输出：2
解释："abb" -> "bb" -> "". 
先删除回文子序列 "a"，然后再删除 "bb"。

题解：

本题是一题规律题，因为最后结果只有0、1、2三种结果。若s为空串，返回0；若s不为空串且为回文串，那么返回1；
若s不为空串且不为回文串，返回2。原因：因为s不为回文串，那么最小删除次数就为2，
第一步删除所有的a，第二步删除所有的b。


class Solution {
public:
    int removePalindromeSub(string s) {
        if(s.empty())return 0;
        int i =0,j = s.size()-1;
        while(i<j)if(s[i++] != s[j--])return 2;
        return 1;
    }
};