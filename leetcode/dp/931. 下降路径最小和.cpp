给定一个方形整数数组 A，我们想要得到通过 A 的下降路径的最小和。

下降路径可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列。

 

示例：

输入：[[1,2,3],[4,5,6],[7,8,9]]
输出：12
解释：
可能的下降路径有：
[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
和最小的下降路径是 [1,4,7]，所以答案是 12。

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& A) {
        int n = A.size();
        for(int i=1;i<n;i++){
            A[i][0]+=min(A[i-1][0],A[i-1][1]);
            for(int j =1;j<n-1;j++){
                A[i][j]+=min(A[i-1][j-1],min(A[i-1][j],A[i-1][j+1]));
            }
            A[i][n-1]+=min(A[i-1][n-1],A[i-1][n-2]);
        }
        int res = INT_MAX;
        for(int num:A[n-1]){
            res = min(num,res);
        }
        return res;
    }
};