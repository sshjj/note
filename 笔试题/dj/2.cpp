在零食间里有一个零食柜，里面会供应很多好吃的零食，柜子被隔成了一个个小格子，类似一个矩阵，每个格子里会放置由前台小姐姐们精心挑选的零食，并且标上相应的价格。

小A是一个大吃货，每天他都要光顾一次零食间，但是他又要减肥，于是他便对自己做了一个约束，每次只能从里面拿走总价格少于V的零食。这时候问题来了，对于每种零食，小A都有一个内心的满意度，小A希望每次都能吃上让自己最满意的零食。

假设零食柜里每个格只放置一种零食，每种零食的数量是有限的，买完就没有了，零食只能按照整数倍购买，不能只买半件。问小A在有限价格内买到的零食的总满意度最高是多少？



输入描述
先输入第一行，里面有两个正整数N和T 中间用空格隔开，其中N表示零食的种类数目，T表示小A最多用于购买零食的钱。（1 <= N <= 100, 1 <= T <= 10000）

然后在输入N行，每行有三个正整数用空格隔开，按顺序表示 零食需要的价格v，满意度l 和 零食的数量c。(1 <= v <= 100, 1 <= l <= 100 ,1 <= c <= 100)

输出描述
对于每组测试数据:输出一个正整数，如果无法购买任何一个零食输出0，否则输出最大的满意度。

2 10 
1 1 1
1 1 1
样例输出
2

提示
输入样例二：
3 100
26 100 4
 5  1  4
 5  2  2 
输出样例二：
306




#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n, t;
    cin >> n >> t;
    int i, j;
    int v, l, c;
    vector<int> vs, ls;
    vector<int> dp(t + 1, 0);
    for (i = 0; i < n; ++i)
    {
        cin >> v >> l >> c;
        while (c--)
        {
            vs.emplace_back(v);
            ls.emplace_back(l);
        }
    }
    int tot = vs.size();
    for (i = 0; i < tot; ++i)
    {
        for (j = t; j >= 1; --j)
        {
            if (j < vs[i])
                break;
            dp[j] = max(dp[j], dp[j - vs[i]] + ls[i]);
        }
    }
    cout << dp[t];
}